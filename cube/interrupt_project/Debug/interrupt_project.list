
interrupt_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007a0  080007a0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080007a0  080007a0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a0  080007a0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a0  080007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080007a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  080007b0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080007b0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000118f  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000559  00000000  00000000  000211bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00021718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  000218d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000127ea  00000000  00000000  00021a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001da8  00000000  00000000  0003422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b083  00000000  00000000  00035fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004cc  00000000  00000000  000d10a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000778 	.word	0x08000778

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08000778 	.word	0x08000778

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <setup_blink_timer>:
/*
	Green LED is controlled by PWM
	Blinking has 50% duty cycle
 */
#define PWM_MODE_1 0b110
static inline void setup_blink_timer() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000254:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <setup_blink_timer+0xc0>)
 8000256:	69da      	ldr	r2, [r3, #28]
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <setup_blink_timer+0xc0>)
 800025a:	2101      	movs	r1, #1
 800025c:	430a      	orrs	r2, r1
 800025e:	61da      	str	r2, [r3, #28]

	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S); // Set T2C1 to output mode
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	699a      	ldr	r2, [r3, #24]
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2103      	movs	r1, #3
 800026c:	438a      	bics	r2, r1
 800026e:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1PE); // Disable preload
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	699a      	ldr	r2, [r3, #24]
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2108      	movs	r1, #8
 800027c:	438a      	bics	r2, r1
 800027e:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	699a      	ldr	r2, [r3, #24]
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2170      	movs	r1, #112	; 0x70
 800028c:	438a      	bics	r2, r1
 800028e:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= (PWM_MODE_1 << TIM_CCMR1_OC1M_Pos); // Set T2C1 to PWM Mode 1
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2160      	movs	r1, #96	; 0x60
 800029c:	430a      	orrs	r2, r1
 800029e:	619a      	str	r2, [r3, #24]
	// Disabling preload ensures changes to duty cycle take place immediately
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1PE; // Disable CCR1 (duty cycle) preload
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	699a      	ldr	r2, [r3, #24]
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2108      	movs	r1, #8
 80002ac:	438a      	bics	r2, r1
 80002ae:	619a      	str	r2, [r3, #24]

	TIM2->CCER |= TIM_CCER_CC1E; // Activate output channel 1
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	6a1a      	ldr	r2, [r3, #32]
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2101      	movs	r1, #1
 80002bc:	430a      	orrs	r2, r1
 80002be:	621a      	str	r2, [r3, #32]
	TIM2->CCER &= ~TIM_CCER_CC1P; // Set to active high
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	6a1a      	ldr	r2, [r3, #32]
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2102      	movs	r1, #2
 80002cc:	438a      	bics	r2, r1
 80002ce:	621a      	str	r2, [r3, #32]


	TIM2->PSC = GET_PSC(TIM2_FREQ); // Set clock to 1000 Hz
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <setup_blink_timer+0xc4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	22fa      	movs	r2, #250	; 0xfa
 80002d6:	0091      	lsls	r1, r2, #2
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ff13 	bl	8000104 <__udivsi3>
 80002de:	0003      	movs	r3, r0
 80002e0:	001a      	movs	r2, r3
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	3a01      	subs	r2, #1
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM2_FREQ-1; // Set PWM freq to 1Hz
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <setup_blink_timer+0xc8>)
 80002f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = ON_DUTY; // Duty cycle 100%
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <setup_blink_timer+0xc8>)
 80002f8:	635a      	str	r2, [r3, #52]	; 0x34

	TIM2->CR1 |= TIM_CR1_CEN; // enable timer
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2101      	movs	r1, #1
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	20000000 	.word	0x20000000
 8000318:	000003e7 	.word	0x000003e7

0800031c <TIM3_IRQHandler>:
	- When button isr triggered, restart timer
	- If timer is allowed to reach ARR without resetting, enough time has passed
	- Timer ISR switches state
 */
int state = ON;
void TIM3_IRQHandler(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	if (!(TIM3->SR & TIM_SR_UIF)) return; // Check flag
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <TIM3_IRQHandler+0x3c>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	2201      	movs	r2, #1
 8000326:	4013      	ands	r3, r2
 8000328:	d013      	beq.n	8000352 <TIM3_IRQHandler+0x36>
	TIM3->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <TIM3_IRQHandler+0x3c>)
 800032c:	691a      	ldr	r2, [r3, #16]
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <TIM3_IRQHandler+0x3c>)
 8000330:	2101      	movs	r1, #1
 8000332:	438a      	bics	r2, r1
 8000334:	611a      	str	r2, [r3, #16]
	if (state == MAX_STATE) state = MIN_STATE;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <TIM3_IRQHandler+0x40>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d103      	bne.n	8000346 <TIM3_IRQHandler+0x2a>
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <TIM3_IRQHandler+0x40>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	e006      	b.n	8000354 <TIM3_IRQHandler+0x38>
	else state++;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <TIM3_IRQHandler+0x40>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <TIM3_IRQHandler+0x40>)
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	e000      	b.n	8000354 <TIM3_IRQHandler+0x38>
	if (!(TIM3->SR & TIM_SR_UIF)) return; // Check flag
 8000352:	46c0      	nop			; (mov r8, r8)
}
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40000400 	.word	0x40000400
 800035c:	20000024 	.word	0x20000024

08000360 <setup_debounce_timer>:

static inline void setup_debounce_timer() {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <setup_debounce_timer+0x60>)
 8000366:	69da      	ldr	r2, [r3, #28]
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <setup_debounce_timer+0x60>)
 800036a:	2102      	movs	r1, #2
 800036c:	430a      	orrs	r2, r1
 800036e:	61da      	str	r2, [r3, #28]

	TIM3->PSC = GET_PSC(1000); // Set prescaler so that frequency = 1KHZ
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <setup_debounce_timer+0x64>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	22fa      	movs	r2, #250	; 0xfa
 8000376:	0091      	lsls	r1, r2, #2
 8000378:	0018      	movs	r0, r3
 800037a:	f7ff fec3 	bl	8000104 <__udivsi3>
 800037e:	0003      	movs	r3, r0
 8000380:	001a      	movs	r2, r3
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <setup_debounce_timer+0x68>)
 8000384:	3a01      	subs	r2, #1
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = DEBOUNCE_TIME; // Set timer delay to debounce time
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <setup_debounce_timer+0x68>)
 800038a:	2232      	movs	r2, #50	; 0x32
 800038c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= TIM_CR1_OPM; // Set to one pulse mode
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <setup_debounce_timer+0x68>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <setup_debounce_timer+0x68>)
 8000394:	2108      	movs	r1, #8
 8000396:	430a      	orrs	r2, r1
 8000398:	601a      	str	r2, [r3, #0]

	TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupt
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <setup_debounce_timer+0x68>)
 800039c:	68da      	ldr	r2, [r3, #12]
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <setup_debounce_timer+0x68>)
 80003a0:	2101      	movs	r1, #1
 80003a2:	430a      	orrs	r2, r1
 80003a4:	60da      	str	r2, [r3, #12]
	TIM3->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <setup_debounce_timer+0x68>)
 80003a8:	691a      	ldr	r2, [r3, #16]
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <setup_debounce_timer+0x68>)
 80003ac:	2101      	movs	r1, #1
 80003ae:	438a      	bics	r2, r1
 80003b0:	611a      	str	r2, [r3, #16]
	NVIC_EnableIRQ(TIM3_IRQn);
 80003b2:	2010      	movs	r0, #16
 80003b4:	f7ff ff32 	bl	800021c <__NVIC_EnableIRQ>

}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	40021000 	.word	0x40021000
 80003c4:	20000000 	.word	0x20000000
 80003c8:	40000400 	.word	0x40000400

080003cc <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if (!(EXTI->PR & EXTI_PR_PR13)) return;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <EXTI4_15_IRQHandler+0x38>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	019b      	lsls	r3, r3, #6
 80003d8:	4013      	ands	r3, r2
 80003da:	d010      	beq.n	80003fe <EXTI4_15_IRQHandler+0x32>
	EXTI->PR |= EXTI_PR_PR13; // Clear interrupt flag
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <EXTI4_15_IRQHandler+0x38>)
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <EXTI4_15_IRQHandler+0x38>)
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	430a      	orrs	r2, r1
 80003e8:	615a      	str	r2, [r3, #20]
	TIM3->CNT = 0; // Reset debounce timer
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <EXTI4_15_IRQHandler+0x3c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN; // Start debounce timer
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <EXTI4_15_IRQHandler+0x3c>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <EXTI4_15_IRQHandler+0x3c>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e000      	b.n	8000400 <EXTI4_15_IRQHandler+0x34>
	if (!(EXTI->PR & EXTI_PR_PR13)) return;
 80003fe:	46c0      	nop			; (mov r8, r8)

}
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010400 	.word	0x40010400
 8000408:	40000400 	.word	0x40000400

0800040c <setup_gpio>:

static inline void setup_gpio()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN;
 8000410:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <setup_gpio+0xe4>)
 8000412:	695a      	ldr	r2, [r3, #20]
 8000414:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <setup_gpio+0xe4>)
 8000416:	21a0      	movs	r1, #160	; 0xa0
 8000418:	0309      	lsls	r1, r1, #12
 800041a:	430a      	orrs	r2, r1
 800041c:	615a      	str	r2, [r3, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800041e:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <setup_gpio+0xe4>)
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <setup_gpio+0xe4>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	619a      	str	r2, [r3, #24]


    GPIOA->MODER &= ~GPIO_MODER_MODER5;
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	2390      	movs	r3, #144	; 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	492f      	ldr	r1, [pc, #188]	; (80004f4 <setup_gpio+0xe8>)
 8000436:	400a      	ands	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0b10 << GPIO_MODER_MODER5_Pos); // Set PA5 (LED) to alternate function
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	0109      	lsls	r1, r1, #4
 8000448:	430a      	orrs	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	6a1a      	ldr	r2, [r3, #32]
 8000452:	2390      	movs	r3, #144	; 0x90
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	4928      	ldr	r1, [pc, #160]	; (80004f8 <setup_gpio+0xec>)
 8000458:	400a      	ands	r2, r1
 800045a:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[0] |= (2u << GPIO_AFRL_AFSEL5_Pos); // Alternate function 2 (timer 2 channel 1)
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	6a1a      	ldr	r2, [r3, #32]
 8000462:	2390      	movs	r3, #144	; 0x90
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	0389      	lsls	r1, r1, #14
 800046a:	430a      	orrs	r2, r1
 800046c:	621a      	str	r2, [r3, #32]

    GPIOC->MODER &= ~GPIO_MODER_MODER13; // Set PC13 to input mode
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <setup_gpio+0xf0>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <setup_gpio+0xf0>)
 8000474:	4922      	ldr	r1, [pc, #136]	; (8000500 <setup_gpio+0xf4>)
 8000476:	400a      	ands	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13;
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <setup_gpio+0xf0>)
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <setup_gpio+0xf0>)
 8000480:	491f      	ldr	r1, [pc, #124]	; (8000500 <setup_gpio+0xf4>)
 8000482:	400a      	ands	r2, r1
 8000484:	60da      	str	r2, [r3, #12]
    GPIOC->PUPDR |= (0b01 << GPIO_PUPDR_PUPDR13_Pos); // Set PC13 to pullup mode
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <setup_gpio+0xf0>)
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <setup_gpio+0xf0>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	04c9      	lsls	r1, r1, #19
 8000490:	430a      	orrs	r2, r1
 8000492:	60da      	str	r2, [r3, #12]


    SYSCFG->EXTICR[3] &= SYSCFG_EXTICR4_EXTI13;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <setup_gpio+0xf8>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <setup_gpio+0xf8>)
 800049a:	21f0      	movs	r1, #240	; 0xf0
 800049c:	400a      	ands	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC; // Set EXTI line 13 to port C
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <setup_gpio+0xf8>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <setup_gpio+0xf8>)
 80004a6:	2120      	movs	r1, #32
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]

    EXTI->IMR |= EXTI_IMR_MR13; //Unmask
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <setup_gpio+0xfc>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <setup_gpio+0xfc>)
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0189      	lsls	r1, r1, #6
 80004b6:	430a      	orrs	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]
    EXTI->FTSR |= EXTI_FTSR_TR13; // Enable falling edge
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <setup_gpio+0xfc>)
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <setup_gpio+0xfc>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0189      	lsls	r1, r1, #6
 80004c4:	430a      	orrs	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
    EXTI->RTSR &= ~EXTI_RTSR_TR13; // Disable rising edge
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <setup_gpio+0xfc>)
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <setup_gpio+0xfc>)
 80004ce:	490f      	ldr	r1, [pc, #60]	; (800050c <setup_gpio+0x100>)
 80004d0:	400a      	ands	r2, r1
 80004d2:	609a      	str	r2, [r3, #8]
    EXTI->PR |= EXTI_PR_PR13; // Clear interrupt flag
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <setup_gpio+0xfc>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <setup_gpio+0xfc>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0189      	lsls	r1, r1, #6
 80004de:	430a      	orrs	r2, r1
 80004e0:	615a      	str	r2, [r3, #20]


    NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f7ff fe9a 	bl	800021c <__NVIC_EnableIRQ>

}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000
 80004f4:	fffff3ff 	.word	0xfffff3ff
 80004f8:	ff0fffff 	.word	0xff0fffff
 80004fc:	48000800 	.word	0x48000800
 8000500:	f3ffffff 	.word	0xf3ffffff
 8000504:	40010000 	.word	0x40010000
 8000508:	40010400 	.word	0x40010400
 800050c:	ffffdfff 	.word	0xffffdfff

08000510 <setup>:

void setup() {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000514:	f000 f84a 	bl	80005ac <SystemCoreClockUpdate>
	setup_debounce_timer();
 8000518:	f7ff ff22 	bl	8000360 <setup_debounce_timer>
	setup_blink_timer();
 800051c:	f7ff fe98 	bl	8000250 <setup_blink_timer>
	setup_gpio();
 8000520:	f7ff ff74 	bl	800040c <setup_gpio>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <main>:


int main() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	setup();
 8000530:	f7ff ffee 	bl	8000510 <setup>
    while(1) {
    	switch (state) {
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <main+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d00f      	beq.n	800055c <main+0x30>
 800053c:	dcfa      	bgt.n	8000534 <main+0x8>
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <main+0x1c>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d005      	beq.n	8000552 <main+0x26>
 8000546:	e7f5      	b.n	8000534 <main+0x8>
    	case ON:
    		TIM2->CCR1 = ON_DUTY; // 100% duty cycle
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x44>)
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
    		break;
 8000550:	e00a      	b.n	8000568 <main+0x3c>
    	case OFF:
    		TIM2->CCR1 = OFF_DUTY; // 0% duty cycle
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2200      	movs	r2, #0
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
    		break;
 800055a:	e005      	b.n	8000568 <main+0x3c>
    	case BLINK:
    		TIM2->CCR1 = BLINK_DUTY; // 50% duty cycle
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	22f4      	movs	r2, #244	; 0xf4
 8000562:	32ff      	adds	r2, #255	; 0xff
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
    		break;
 8000566:	46c0      	nop			; (mov r8, r8)
    	switch (state) {
 8000568:	e7e4      	b.n	8000534 <main+0x8>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000024 	.word	0x20000024
 8000570:	000003e7 	.word	0x000003e7

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f8b8 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005c2:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <SystemCoreClockUpdate+0xf8>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	220c      	movs	r2, #12
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d011      	beq.n	80005f6 <SystemCoreClockUpdate+0x4a>
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d84f      	bhi.n	8000678 <SystemCoreClockUpdate+0xcc>
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d003      	beq.n	80005e6 <SystemCoreClockUpdate+0x3a>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d004      	beq.n	80005ee <SystemCoreClockUpdate+0x42>
 80005e4:	e048      	b.n	8000678 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 80005e8:	4a30      	ldr	r2, [pc, #192]	; (80006ac <SystemCoreClockUpdate+0x100>)
 80005ea:	601a      	str	r2, [r3, #0]
      break;
 80005ec:	e048      	b.n	8000680 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 80005f0:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <SystemCoreClockUpdate+0x100>)
 80005f2:	601a      	str	r2, [r3, #0]
      break;
 80005f4:	e044      	b.n	8000680 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SystemCoreClockUpdate+0xf8>)
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	23f0      	movs	r3, #240	; 0xf0
 80005fc:	039b      	lsls	r3, r3, #14
 80005fe:	4013      	ands	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemCoreClockUpdate+0xf8>)
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	025b      	lsls	r3, r3, #9
 800060a:	4013      	ands	r3, r2
 800060c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	0c9b      	lsrs	r3, r3, #18
 8000612:	3302      	adds	r3, #2
 8000614:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemCoreClockUpdate+0xf8>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	220f      	movs	r2, #15
 800061c:	4013      	ands	r3, r2
 800061e:	3301      	adds	r3, #1
 8000620:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	025b      	lsls	r3, r3, #9
 8000628:	429a      	cmp	r2, r3
 800062a:	d10a      	bne.n	8000642 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	481f      	ldr	r0, [pc, #124]	; (80006ac <SystemCoreClockUpdate+0x100>)
 8000630:	f7ff fd68 	bl	8000104 <__udivsi3>
 8000634:	0003      	movs	r3, r0
 8000636:	001a      	movs	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	435a      	muls	r2, r3
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 800063e:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8000640:	e01e      	b.n	8000680 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	23c0      	movs	r3, #192	; 0xc0
 8000646:	025b      	lsls	r3, r3, #9
 8000648:	429a      	cmp	r2, r3
 800064a:	d10a      	bne.n	8000662 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <SystemCoreClockUpdate+0x104>)
 8000650:	f7ff fd58 	bl	8000104 <__udivsi3>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	435a      	muls	r2, r3
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 800065e:	601a      	str	r2, [r3, #0]
      break;
 8000660:	e00e      	b.n	8000680 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8000662:	6839      	ldr	r1, [r7, #0]
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <SystemCoreClockUpdate+0x100>)
 8000666:	f7ff fd4d 	bl	8000104 <__udivsi3>
 800066a:	0003      	movs	r3, r0
 800066c:	001a      	movs	r2, r3
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	435a      	muls	r2, r3
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 8000674:	601a      	str	r2, [r3, #0]
      break;
 8000676:	e003      	b.n	8000680 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <SystemCoreClockUpdate+0x100>)
 800067c:	601a      	str	r2, [r3, #0]
      break;
 800067e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <SystemCoreClockUpdate+0xf8>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	091b      	lsrs	r3, r3, #4
 8000686:	220f      	movs	r2, #15
 8000688:	4013      	ands	r3, r2
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SystemCoreClockUpdate+0x108>)
 800068c:	5cd3      	ldrb	r3, [r2, r3]
 800068e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	40da      	lsrs	r2, r3
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <SystemCoreClockUpdate+0xfc>)
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b004      	add	sp, #16
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	20000000 	.word	0x20000000
 80006ac:	007a1200 	.word	0x007a1200
 80006b0:	02dc6c00 	.word	0x02dc6c00
 80006b4:	08000790 	.word	0x08000790

080006b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006bc:	f7ff ff71 	bl	80005a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e6:	f000 f823 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff ff1f 	bl	800052c <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   r0, =_estack
 80006f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80006fc:	080007a8 	.word	0x080007a8
  ldr r2, =_sbss
 8000700:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000704:	2000002c 	.word	0x2000002c

08000708 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_COMP_IRQHandler>
	...

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	18d2      	adds	r2, r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000004 	.word	0x20000004
 800072c:	20000028 	.word	0x20000028

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	2600      	movs	r6, #0
 8000734:	4d0c      	ldr	r5, [pc, #48]	; (8000768 <__libc_init_array+0x38>)
 8000736:	4c0d      	ldr	r4, [pc, #52]	; (800076c <__libc_init_array+0x3c>)
 8000738:	1b64      	subs	r4, r4, r5
 800073a:	10a4      	asrs	r4, r4, #2
 800073c:	42a6      	cmp	r6, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	2600      	movs	r6, #0
 8000742:	f000 f819 	bl	8000778 <_init>
 8000746:	4d0a      	ldr	r5, [pc, #40]	; (8000770 <__libc_init_array+0x40>)
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <__libc_init_array+0x44>)
 800074a:	1b64      	subs	r4, r4, r5
 800074c:	10a4      	asrs	r4, r4, #2
 800074e:	42a6      	cmp	r6, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	00b3      	lsls	r3, r6, #2
 8000756:	58eb      	ldr	r3, [r5, r3]
 8000758:	4798      	blx	r3
 800075a:	3601      	adds	r6, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	00b3      	lsls	r3, r6, #2
 8000760:	58eb      	ldr	r3, [r5, r3]
 8000762:	4798      	blx	r3
 8000764:	3601      	adds	r6, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	080007a0 	.word	0x080007a0
 800076c:	080007a0 	.word	0x080007a0
 8000770:	080007a0 	.word	0x080007a0
 8000774:	080007a4 	.word	0x080007a4

08000778 <_init>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr

08000784 <_fini>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr
