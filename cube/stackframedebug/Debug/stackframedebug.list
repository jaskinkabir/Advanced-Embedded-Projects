
stackframedebug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000144  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000204  0800020c  0000120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000204  08000204  0000120c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000204  08000204  0000120c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000204  0800020c  0000120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000204  08000204  00001204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000208  08000208  00001208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800020c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800020c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000f2  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000b6  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000032  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000acb  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000000de  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002de1  00000000  00000000  0000200b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00004e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080001ec 	.word	0x080001ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080001ec 	.word	0x080001ec

08000108 <debugFunction>:
int debugFunction(int p, int q) {
 8000108:	b580      	push	{r7, lr}
 800010a:	b086      	sub	sp, #24
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
 8000110:	6039      	str	r1, [r7, #0]
    // Local copies of parameters
    int a = p;
 8000112:	687b      	ldr	r3, [r7, #4]
 8000114:	617b      	str	r3, [r7, #20]
    int b = q;
 8000116:	683b      	ldr	r3, [r7, #0]
 8000118:	613b      	str	r3, [r7, #16]
    // Simple operation on the locals
    int c = a + b;
 800011a:	697a      	ldr	r2, [r7, #20]
 800011c:	693b      	ldr	r3, [r7, #16]
 800011e:	18d3      	adds	r3, r2, r3
 8000120:	60fb      	str	r3, [r7, #12]
    return c;  // breakpoint here (returning the sum)
 8000122:	68fb      	ldr	r3, [r7, #12]
}
 8000124:	0018      	movs	r0, r3
 8000126:	46bd      	mov	sp, r7
 8000128:	b006      	add	sp, #24
 800012a:	bd80      	pop	{r7, pc}

0800012c <main>:

int main(void) {
 800012c:	b580      	push	{r7, lr}
 800012e:	b084      	sub	sp, #16
 8000130:	af00      	add	r7, sp, #0
    int var1 = 5;
 8000132:	2305      	movs	r3, #5
 8000134:	60fb      	str	r3, [r7, #12]
    int var2 = 7;
 8000136:	2307      	movs	r3, #7
 8000138:	60bb      	str	r3, [r7, #8]
    // Call the debugFunction with two variables
    int result = debugFunction(var1, var2);
 800013a:	68ba      	ldr	r2, [r7, #8]
 800013c:	68fb      	ldr	r3, [r7, #12]
 800013e:	0011      	movs	r1, r2
 8000140:	0018      	movs	r0, r3
 8000142:	f7ff ffe1 	bl	8000108 <debugFunction>
 8000146:	0003      	movs	r3, r0
 8000148:	607b      	str	r3, [r7, #4]
    // Infinite loop (program end)
    while (1) {
 800014a:	46c0      	nop			@ (mov r8, r8)
 800014c:	e7fd      	b.n	800014a <main+0x1e>
	...

08000150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000150:	480d      	ldr	r0, [pc, #52]	@ (8000188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000152:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000154:	e000      	b.n	8000158 <Reset_Handler+0x8>
 8000156:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000158:	480c      	ldr	r0, [pc, #48]	@ (800018c <LoopForever+0x6>)
  ldr r1, =_edata
 800015a:	490d      	ldr	r1, [pc, #52]	@ (8000190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800015c:	4a0d      	ldr	r2, [pc, #52]	@ (8000194 <LoopForever+0xe>)
  movs r3, #0
 800015e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000160:	e002      	b.n	8000168 <LoopCopyDataInit>

08000162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000166:	3304      	adds	r3, #4

08000168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800016a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800016c:	d3f9      	bcc.n	8000162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800016e:	4a0a      	ldr	r2, [pc, #40]	@ (8000198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000170:	4c0a      	ldr	r4, [pc, #40]	@ (800019c <LoopForever+0x16>)
  movs r3, #0
 8000172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000174:	e001      	b.n	800017a <LoopFillZerobss>

08000176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000178:	3204      	adds	r2, #4

0800017a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800017a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800017c:	d3fb      	bcc.n	8000176 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800017e:	f000 f811 	bl	80001a4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000182:	f7ff ffd3 	bl	800012c <main>

08000186 <LoopForever>:

LoopForever:
  b LoopForever
 8000186:	e7fe      	b.n	8000186 <LoopForever>
  ldr   r0, =_estack
 8000188:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800018c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000190:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000194:	0800020c 	.word	0x0800020c
  ldr r2, =_sbss
 8000198:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800019c:	2000001c 	.word	0x2000001c

080001a0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001a0:	e7fe      	b.n	80001a0 <ADC_COMP_IRQHandler>
	...

080001a4 <__libc_init_array>:
 80001a4:	b570      	push	{r4, r5, r6, lr}
 80001a6:	2600      	movs	r6, #0
 80001a8:	4c0c      	ldr	r4, [pc, #48]	@ (80001dc <__libc_init_array+0x38>)
 80001aa:	4d0d      	ldr	r5, [pc, #52]	@ (80001e0 <__libc_init_array+0x3c>)
 80001ac:	1b64      	subs	r4, r4, r5
 80001ae:	10a4      	asrs	r4, r4, #2
 80001b0:	42a6      	cmp	r6, r4
 80001b2:	d109      	bne.n	80001c8 <__libc_init_array+0x24>
 80001b4:	2600      	movs	r6, #0
 80001b6:	f000 f819 	bl	80001ec <_init>
 80001ba:	4c0a      	ldr	r4, [pc, #40]	@ (80001e4 <__libc_init_array+0x40>)
 80001bc:	4d0a      	ldr	r5, [pc, #40]	@ (80001e8 <__libc_init_array+0x44>)
 80001be:	1b64      	subs	r4, r4, r5
 80001c0:	10a4      	asrs	r4, r4, #2
 80001c2:	42a6      	cmp	r6, r4
 80001c4:	d105      	bne.n	80001d2 <__libc_init_array+0x2e>
 80001c6:	bd70      	pop	{r4, r5, r6, pc}
 80001c8:	00b3      	lsls	r3, r6, #2
 80001ca:	58eb      	ldr	r3, [r5, r3]
 80001cc:	4798      	blx	r3
 80001ce:	3601      	adds	r6, #1
 80001d0:	e7ee      	b.n	80001b0 <__libc_init_array+0xc>
 80001d2:	00b3      	lsls	r3, r6, #2
 80001d4:	58eb      	ldr	r3, [r5, r3]
 80001d6:	4798      	blx	r3
 80001d8:	3601      	adds	r6, #1
 80001da:	e7f2      	b.n	80001c2 <__libc_init_array+0x1e>
 80001dc:	08000204 	.word	0x08000204
 80001e0:	08000204 	.word	0x08000204
 80001e4:	08000208 	.word	0x08000208
 80001e8:	08000204 	.word	0x08000204

080001ec <_init>:
 80001ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ee:	46c0      	nop			@ (mov r8, r8)
 80001f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001f2:	bc08      	pop	{r3}
 80001f4:	469e      	mov	lr, r3
 80001f6:	4770      	bx	lr

080001f8 <_fini>:
 80001f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001fa:	46c0      	nop			@ (mov r8, r8)
 80001fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001fe:	bc08      	pop	{r3}
 8000200:	469e      	mov	lr, r3
 8000202:	4770      	bx	lr
