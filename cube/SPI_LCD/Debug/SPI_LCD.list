
SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000064c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025800  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f08  08025f08  00040004  2**0
                  CONTENTS
  4 .ARM          00000000  08025f08  08025f08  00040004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08025f08  08025f08  00040004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025f08  08025f08  00035f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025f0c  08025f0c  00035f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08025f10  00040000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08025f14  00040004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08025f14  00040024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000106c  00000000  00000000  0004002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000573  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00041610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00041800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001908a  00000000  00000000  000419a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002183  00000000  00000000  0005aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b235  00000000  00000000  0005cbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7dea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000f7e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080006f0 	.word	0x080006f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080006f0 	.word	0x080006f0

08000104 <set_gpio_mode>:
#define LCD_HEIGHT    320  


#define RESET_DELAY 20000

static inline void set_gpio_mode(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t mode) {
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	6078      	str	r0, [r7, #4]
 800010c:	0008      	movs	r0, r1
 800010e:	0011      	movs	r1, r2
 8000110:	1cfb      	adds	r3, r7, #3
 8000112:	1c02      	adds	r2, r0, #0
 8000114:	701a      	strb	r2, [r3, #0]
 8000116:	1cbb      	adds	r3, r7, #2
 8000118:	1c0a      	adds	r2, r1, #0
 800011a:	701a      	strb	r2, [r3, #0]
  GPIOx->MODER &= ~(0b11 << (pin * 2));
 800011c:	687b      	ldr	r3, [r7, #4]
 800011e:	681b      	ldr	r3, [r3, #0]
 8000120:	1cfa      	adds	r2, r7, #3
 8000122:	7812      	ldrb	r2, [r2, #0]
 8000124:	0052      	lsls	r2, r2, #1
 8000126:	2103      	movs	r1, #3
 8000128:	4091      	lsls	r1, r2
 800012a:	000a      	movs	r2, r1
 800012c:	43d2      	mvns	r2, r2
 800012e:	401a      	ands	r2, r3
 8000130:	687b      	ldr	r3, [r7, #4]
 8000132:	601a      	str	r2, [r3, #0]
  GPIOx->MODER |= (mode << (pin * 2));
 8000134:	687b      	ldr	r3, [r7, #4]
 8000136:	681b      	ldr	r3, [r3, #0]
 8000138:	1cba      	adds	r2, r7, #2
 800013a:	7811      	ldrb	r1, [r2, #0]
 800013c:	1cfa      	adds	r2, r7, #3
 800013e:	7812      	ldrb	r2, [r2, #0]
 8000140:	0052      	lsls	r2, r2, #1
 8000142:	4091      	lsls	r1, r2
 8000144:	000a      	movs	r2, r1
 8000146:	431a      	orrs	r2, r3
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	601a      	str	r2, [r3, #0]
}
 800014c:	46c0      	nop			; (mov r8, r8)
 800014e:	46bd      	mov	sp, r7
 8000150:	b002      	add	sp, #8
 8000152:	bd80      	pop	{r7, pc}

08000154 <set_af>:

static inline void set_af(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t af) {
 8000154:	b580      	push	{r7, lr}
 8000156:	b082      	sub	sp, #8
 8000158:	af00      	add	r7, sp, #0
 800015a:	6078      	str	r0, [r7, #4]
 800015c:	0008      	movs	r0, r1
 800015e:	0011      	movs	r1, r2
 8000160:	1cfb      	adds	r3, r7, #3
 8000162:	1c02      	adds	r2, r0, #0
 8000164:	701a      	strb	r2, [r3, #0]
 8000166:	1cbb      	adds	r3, r7, #2
 8000168:	1c0a      	adds	r2, r1, #0
 800016a:	701a      	strb	r2, [r3, #0]
  if (pin < 8) {
 800016c:	1cfb      	adds	r3, r7, #3
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b07      	cmp	r3, #7
 8000172:	d818      	bhi.n	80001a6 <set_af+0x52>
    GPIOx->AFR[0] &= ~(0b1111 << (pin * 4));
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	6a1b      	ldr	r3, [r3, #32]
 8000178:	1cfa      	adds	r2, r7, #3
 800017a:	7812      	ldrb	r2, [r2, #0]
 800017c:	0092      	lsls	r2, r2, #2
 800017e:	210f      	movs	r1, #15
 8000180:	4091      	lsls	r1, r2
 8000182:	000a      	movs	r2, r1
 8000184:	43d2      	mvns	r2, r2
 8000186:	401a      	ands	r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	621a      	str	r2, [r3, #32]
    GPIOx->AFR[0] |= (af << (pin * 4));
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	6a1b      	ldr	r3, [r3, #32]
 8000190:	1cba      	adds	r2, r7, #2
 8000192:	7811      	ldrb	r1, [r2, #0]
 8000194:	1cfa      	adds	r2, r7, #3
 8000196:	7812      	ldrb	r2, [r2, #0]
 8000198:	0092      	lsls	r2, r2, #2
 800019a:	4091      	lsls	r1, r2
 800019c:	000a      	movs	r2, r1
 800019e:	431a      	orrs	r2, r3
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	621a      	str	r2, [r3, #32]
  } else {
    GPIOx->AFR[1] &= ~(0b1111 << ((pin - 8) * 4));
    GPIOx->AFR[1] |= (af << ((pin - 8) * 4));
  }
}
 80001a4:	e019      	b.n	80001da <set_af+0x86>
    GPIOx->AFR[1] &= ~(0b1111 << ((pin - 8) * 4));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001aa:	1cfa      	adds	r2, r7, #3
 80001ac:	7812      	ldrb	r2, [r2, #0]
 80001ae:	3a08      	subs	r2, #8
 80001b0:	0092      	lsls	r2, r2, #2
 80001b2:	210f      	movs	r1, #15
 80001b4:	4091      	lsls	r1, r2
 80001b6:	000a      	movs	r2, r1
 80001b8:	43d2      	mvns	r2, r2
 80001ba:	401a      	ands	r2, r3
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOx->AFR[1] |= (af << ((pin - 8) * 4));
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c4:	1cba      	adds	r2, r7, #2
 80001c6:	7811      	ldrb	r1, [r2, #0]
 80001c8:	1cfa      	adds	r2, r7, #3
 80001ca:	7812      	ldrb	r2, [r2, #0]
 80001cc:	3a08      	subs	r2, #8
 80001ce:	0092      	lsls	r2, r2, #2
 80001d0:	4091      	lsls	r1, r2
 80001d2:	000a      	movs	r2, r1
 80001d4:	431a      	orrs	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80001da:	46c0      	nop			; (mov r8, r8)
 80001dc:	46bd      	mov	sp, r7
 80001de:	b002      	add	sp, #8
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <set_gpio_data>:

static inline void set_gpio_data(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t value) {
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b082      	sub	sp, #8
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	0008      	movs	r0, r1
 80001ec:	0011      	movs	r1, r2
 80001ee:	1cfb      	adds	r3, r7, #3
 80001f0:	1c02      	adds	r2, r0, #0
 80001f2:	701a      	strb	r2, [r3, #0]
 80001f4:	1cbb      	adds	r3, r7, #2
 80001f6:	1c0a      	adds	r2, r1, #0
 80001f8:	701a      	strb	r2, [r3, #0]
  if (value) {
 80001fa:	1cbb      	adds	r3, r7, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d00a      	beq.n	8000218 <set_gpio_data+0x36>
    GPIOx->ODR |= (1U << pin);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	695a      	ldr	r2, [r3, #20]
 8000206:	1cfb      	adds	r3, r7, #3
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2101      	movs	r1, #1
 800020c:	4099      	lsls	r1, r3
 800020e:	000b      	movs	r3, r1
 8000210:	431a      	orrs	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	615a      	str	r2, [r3, #20]
  } else {
    GPIOx->ODR &= ~(1U << pin);
  }
}
 8000216:	e00a      	b.n	800022e <set_gpio_data+0x4c>
    GPIOx->ODR &= ~(1U << pin);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	1cfa      	adds	r2, r7, #3
 800021e:	7812      	ldrb	r2, [r2, #0]
 8000220:	2101      	movs	r1, #1
 8000222:	4091      	lsls	r1, r2
 8000224:	000a      	movs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	401a      	ands	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	615a      	str	r2, [r3, #20]
}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	46bd      	mov	sp, r7
 8000232:	b002      	add	sp, #8
 8000234:	bd80      	pop	{r7, pc}

08000236 <lcd_cs_active>:

static inline void lcd_cs_active(void) {
 8000236:	b580      	push	{r7, lr}
 8000238:	af00      	add	r7, sp, #0
  set_gpio_data(CS_PORT, CS_PIN, CS_ACTIVE_VAL);
 800023a:	2390      	movs	r3, #144	; 0x90
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	2200      	movs	r2, #0
 8000240:	2109      	movs	r1, #9
 8000242:	0018      	movs	r0, r3
 8000244:	f7ff ffcd 	bl	80001e2 <set_gpio_data>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <lcd_cs_inactive>:
static inline void lcd_cs_inactive(void) {
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0
  set_gpio_data(CS_PORT, CS_PIN, CS_INACTIVE_VAL);
 8000252:	2390      	movs	r3, #144	; 0x90
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2201      	movs	r2, #1
 8000258:	2109      	movs	r1, #9
 800025a:	0018      	movs	r0, r3
 800025c:	f7ff ffc1 	bl	80001e2 <set_gpio_data>
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <delay_approx>:

static void delay_approx(uint32_t loops) {
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
  for (volatile uint32_t i = 0; i < loops; ++i) {
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e003      	b.n	800027c <delay_approx+0x16>
    __asm__("nop");
 8000274:	46c0      	nop			; (mov r8, r8)
  for (volatile uint32_t i = 0; i < loops; ++i) {
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	d8f7      	bhi.n	8000274 <delay_approx+0xe>
  }
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	b004      	add	sp, #16
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <init_lcd_gpio>:

static inline void init_lcd_gpio(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <init_lcd_gpio+0xa0>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	4b25      	ldr	r3, [pc, #148]	; (8000330 <init_lcd_gpio+0xa0>)
 800029a:	21c0      	movs	r1, #192	; 0xc0
 800029c:	02c9      	lsls	r1, r1, #11
 800029e:	430a      	orrs	r2, r1
 80002a0:	615a      	str	r2, [r3, #20]

  // CS, RESET, DC, as outputs
  set_gpio_mode(CS_PORT,      CS_PIN,      GPIO_OUT_MODE);
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2201      	movs	r2, #1
 80002a8:	2109      	movs	r1, #9
 80002aa:	0018      	movs	r0, r3
 80002ac:	f7ff ff2a 	bl	8000104 <set_gpio_mode>
  set_gpio_mode(RESET_PORT,   RESET_PIN,   GPIO_OUT_MODE);
 80002b0:	2390      	movs	r3, #144	; 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	2201      	movs	r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f7ff ff23 	bl	8000104 <set_gpio_mode>
  set_gpio_mode(DC_PORT,      DC_PIN,      GPIO_OUT_MODE);
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <init_lcd_gpio+0xa4>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	210a      	movs	r1, #10
 80002c4:	0018      	movs	r0, r3
 80002c6:	f7ff ff1d 	bl	8000104 <set_gpio_mode>

  // SCK, MOSI as AF
  set_gpio_mode(SCK_PORT,  SCK_PIN,  GPIO_AF_MODE);
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2202      	movs	r2, #2
 80002d0:	2105      	movs	r1, #5
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff16 	bl	8000104 <set_gpio_mode>
  set_af(SCK_PORT,  SCK_PIN,  GPIO_SPI_AF);  // AF0
 80002d8:	2390      	movs	r3, #144	; 0x90
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2200      	movs	r2, #0
 80002de:	2105      	movs	r1, #5
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ff37 	bl	8000154 <set_af>
  set_gpio_mode(MOSI_PORT, MOSI_PIN, GPIO_AF_MODE);
 80002e6:	2390      	movs	r3, #144	; 0x90
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	2202      	movs	r2, #2
 80002ec:	2107      	movs	r1, #7
 80002ee:	0018      	movs	r0, r3
 80002f0:	f7ff ff08 	bl	8000104 <set_gpio_mode>
  set_af(MOSI_PORT, MOSI_PIN, GPIO_SPI_AF);  // AF0
 80002f4:	2390      	movs	r3, #144	; 0x90
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2200      	movs	r2, #0
 80002fa:	2107      	movs	r1, #7
 80002fc:	0018      	movs	r0, r3
 80002fe:	f7ff ff29 	bl	8000154 <set_af>

  // Default states
  set_gpio_data(CS_PORT, CS_PIN, CS_INACTIVE_VAL);
 8000302:	2390      	movs	r3, #144	; 0x90
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	2201      	movs	r2, #1
 8000308:	2109      	movs	r1, #9
 800030a:	0018      	movs	r0, r3
 800030c:	f7ff ff69 	bl	80001e2 <set_gpio_data>
  set_gpio_data(DC_PORT, DC_PIN, DC_COMMAND_MODE_VAL);
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <init_lcd_gpio+0xa4>)
 8000312:	2200      	movs	r2, #0
 8000314:	210a      	movs	r1, #10
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ff63 	bl	80001e2 <set_gpio_data>
  set_gpio_data(RESET_PORT, RESET_PIN, RESET_INACTIVE_VAL);
 800031c:	2390      	movs	r3, #144	; 0x90
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	2201      	movs	r2, #1
 8000322:	2101      	movs	r1, #1
 8000324:	0018      	movs	r0, r3
 8000326:	f7ff ff5c 	bl	80001e2 <set_gpio_data>

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	48000400 	.word	0x48000400

08000338 <init_spi>:

static inline void init_spi(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <init_spi+0x6c>)
 800033e:	699a      	ldr	r2, [r3, #24]
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <init_spi+0x6c>)
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0149      	lsls	r1, r1, #5
 8000346:	430a      	orrs	r2, r1
 8000348:	619a      	str	r2, [r3, #24]

  SPI1->CR1 = 0;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <init_spi+0x70>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = 0;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <init_spi+0x70>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]

  SPI1->CR1 |= SPI_CR1_MSTR;  // Master mode
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <init_spi+0x70>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <init_spi+0x70>)
 800035c:	2104      	movs	r1, #4
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]
  SPI1->CR1 |= (SPI_CLOCK_PRESCALE << SPI_CR1_BR_Pos);
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init_spi+0x70>)
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <init_spi+0x70>)
 8000366:	6812      	ldr	r2, [r2, #0]
 8000368:	601a      	str	r2, [r3, #0]
  SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;  // Software slave management, SSI=1
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <init_spi+0x70>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <init_spi+0x70>)
 8000370:	21c0      	movs	r1, #192	; 0xc0
 8000372:	0089      	lsls	r1, r1, #2
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]

  // SPI mode 0
  SPI1->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA);
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <init_spi+0x70>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <init_spi+0x70>)
 800037e:	2103      	movs	r1, #3
 8000380:	438a      	bics	r2, r1
 8000382:	601a      	str	r2, [r3, #0]

  // Data size = 8-bit, set RX threshold for 8-bit
  SPI1->CR2 |= (SPI_DATA_SIZE_8BIT << SPI_CR2_DS_Pos);
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <init_spi+0x70>)
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <init_spi+0x70>)
 800038a:	21e0      	movs	r1, #224	; 0xe0
 800038c:	00c9      	lsls	r1, r1, #3
 800038e:	430a      	orrs	r2, r1
 8000390:	605a      	str	r2, [r3, #4]

  SPI1->CR1 |= SPI_CR1_SPE;  // Enable SPI
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <init_spi+0x70>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <init_spi+0x70>)
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	430a      	orrs	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40013000 	.word	0x40013000

080003ac <spi_send8>:

static void spi_send8(uint8_t data) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	0002      	movs	r2, r0
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	701a      	strb	r2, [r3, #0]
  while (!(SPI1->SR & SPI_SR_TXE)) { }
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <spi_send8+0x28>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	2202      	movs	r2, #2
 80003c0:	4013      	ands	r3, r2
 80003c2:	d0fa      	beq.n	80003ba <spi_send8+0xe>
  *((__IO uint8_t *)&SPI1->DR) = data;
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <spi_send8+0x2c>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	7013      	strb	r3, [r2, #0]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40013000 	.word	0x40013000
 80003d8:	4001300c 	.word	0x4001300c

080003dc <spi_send16>:
static void spi_send16(uint16_t data) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	0002      	movs	r2, r0
 80003e4:	1dbb      	adds	r3, r7, #6
 80003e6:	801a      	strh	r2, [r3, #0]
  while (!(SPI1->SR & SPI_SR_TXE)) { }
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <spi_send16+0x28>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	2202      	movs	r2, #2
 80003f0:	4013      	ands	r3, r2
 80003f2:	d0fa      	beq.n	80003ea <spi_send16+0xe>
  *((__IO uint16_t *)&SPI1->DR) = data;
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <spi_send16+0x2c>)
 80003f6:	1dbb      	adds	r3, r7, #6
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	8013      	strh	r3, [r2, #0]
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40013000 	.word	0x40013000
 8000408:	4001300c 	.word	0x4001300c

0800040c <spi_wait_done>:

static void spi_wait_done(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  while (SPI1->SR & SPI_SR_BSY) { }
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <spi_wait_done+0x18>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	4013      	ands	r3, r2
 800041a:	d1fa      	bne.n	8000412 <spi_wait_done+0x6>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40013000 	.word	0x40013000

08000428 <lcd_send_command>:

static void lcd_send_command(uint8_t cmd) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
  set_gpio_data(DC_PORT, DC_PIN, DC_COMMAND_MODE_VAL);
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <lcd_send_command+0x34>)
 8000436:	2200      	movs	r2, #0
 8000438:	210a      	movs	r1, #10
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff fed1 	bl	80001e2 <set_gpio_data>
  lcd_cs_active();
 8000440:	f7ff fef9 	bl	8000236 <lcd_cs_active>
  spi_send8(cmd);
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ffaf 	bl	80003ac <spi_send8>
  lcd_cs_inactive();
 800044e:	f7ff fefe 	bl	800024e <lcd_cs_inactive>
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	48000400 	.word	0x48000400

08000460 <lcd_send_command_with_args>:

static void lcd_send_command_with_args(uint8_t cmd, const uint8_t *args, uint32_t n) {
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	240f      	movs	r4, #15
 800046c:	193b      	adds	r3, r7, r4
 800046e:	1c02      	adds	r2, r0, #0
 8000470:	701a      	strb	r2, [r3, #0]
  set_gpio_data(DC_PORT, DC_PIN, DC_COMMAND_MODE_VAL);
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <lcd_send_command_with_args+0x6c>)
 8000474:	2200      	movs	r2, #0
 8000476:	210a      	movs	r1, #10
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff feb2 	bl	80001e2 <set_gpio_data>
  lcd_cs_active();
 800047e:	f7ff feda 	bl	8000236 <lcd_cs_active>
  spi_send8(cmd);
 8000482:	193b      	adds	r3, r7, r4
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff ff90 	bl	80003ac <spi_send8>
  if (n) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d016      	beq.n	80004c0 <lcd_send_command_with_args+0x60>
    set_gpio_data(DC_PORT, DC_PIN, DC_DATA_MODE_VAL);
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <lcd_send_command_with_args+0x6c>)
 8000494:	2201      	movs	r2, #1
 8000496:	210a      	movs	r1, #10
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff fea2 	bl	80001e2 <set_gpio_data>
    for (uint32_t i = 0; i < n; ++i) {
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	e009      	b.n	80004b8 <lcd_send_command_with_args+0x58>
      spi_send8(args[i]);
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	18d3      	adds	r3, r2, r3
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff ff7d 	bl	80003ac <spi_send8>
    for (uint32_t i = 0; i < n; ++i) {
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d3f1      	bcc.n	80004a4 <lcd_send_command_with_args+0x44>
    }
  }
  lcd_cs_inactive();
 80004c0:	f7ff fec5 	bl	800024e <lcd_cs_inactive>
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b007      	add	sp, #28
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	48000400 	.word	0x48000400

080004d0 <init_lcd>:

static void init_lcd(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  init_lcd_gpio();
 80004d6:	f7ff fedb 	bl	8000290 <init_lcd_gpio>

  // Hardware reset
  set_gpio_data(RESET_PORT, RESET_PIN, RESET_ACTIVE_VAL);
 80004da:	2390      	movs	r3, #144	; 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff fe7d 	bl	80001e2 <set_gpio_data>
  delay_approx(RESET_DELAY);  
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <init_lcd+0x6c>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff febb 	bl	8000266 <delay_approx>
  set_gpio_data(RESET_PORT, RESET_PIN, RESET_INACTIVE_VAL);
 80004f0:	2390      	movs	r3, #144	; 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff fe72 	bl	80001e2 <set_gpio_data>
  delay_approx(RESET_DELAY); 
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <init_lcd+0x6c>)
 8000500:	0018      	movs	r0, r3
 8000502:	f7ff feb0 	bl	8000266 <delay_approx>

  init_spi();
 8000506:	f7ff ff17 	bl	8000338 <init_spi>

  // Sleep Out
  lcd_send_command(SLEEP_OUT);
 800050a:	2011      	movs	r0, #17
 800050c:	f7ff ff8c 	bl	8000428 <lcd_send_command>

  // Pixel Format: 16 bit
  {
    const uint8_t pf = PIXEL_FORMAT_16BIT;
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	2255      	movs	r2, #85	; 0x55
 8000514:	701a      	strb	r2, [r3, #0]
    lcd_send_command_with_args(PIXEL_FORMAT_SET, &pf, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	0019      	movs	r1, r3
 800051c:	203a      	movs	r0, #58	; 0x3a
 800051e:	f7ff ff9f 	bl	8000460 <lcd_send_command_with_args>
  }

  // Memory Access Control (orientation)
  {
    const uint8_t mac = DISPLAY_ORIENTATION;
 8000522:	1dbb      	adds	r3, r7, #6
 8000524:	2248      	movs	r2, #72	; 0x48
 8000526:	701a      	strb	r2, [r3, #0]
    lcd_send_command_with_args(MEM_ACCESS_CTRL, &mac, 1);
 8000528:	1dbb      	adds	r3, r7, #6
 800052a:	2201      	movs	r2, #1
 800052c:	0019      	movs	r1, r3
 800052e:	2036      	movs	r0, #54	; 0x36
 8000530:	f7ff ff96 	bl	8000460 <lcd_send_command_with_args>
  }

  // Display ON
  //lcd_send_command(DISPLAY_ON);
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	00004e20 	.word	0x00004e20

08000540 <main>:

#define WALTER_MODE 1  

int main(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  init_lcd();
 8000546:	f7ff ffc3 	bl	80004d0 <init_lcd>
    lcd_cs_inactive();
  }

  else {

    lcd_send_command(DISPLAY_OFF);
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	f7ff ff6c 	bl	8000428 <lcd_send_command>
    spi_wait_done();
 8000550:	f7ff ff5c 	bl	800040c <spi_wait_done>
    lcd_send_command(MEM_WRITE);
 8000554:	202c      	movs	r0, #44	; 0x2c
 8000556:	f7ff ff67 	bl	8000428 <lcd_send_command>
    set_gpio_data(DC_PORT, DC_PIN, DC_DATA_MODE_VAL);
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <main+0xac>)
 800055c:	2201      	movs	r2, #1
 800055e:	210a      	movs	r1, #10
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff fe3e 	bl	80001e2 <set_gpio_data>
    lcd_cs_active();
 8000566:	f7ff fe66 	bl	8000236 <lcd_cs_active>

    SPI1->CR2 |= (SPI_DATA_SIZE_16BIT << SPI_CR2_DS_Pos);
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <main+0xb0>)
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0xb0>)
 8000570:	21f0      	movs	r1, #240	; 0xf0
 8000572:	0109      	lsls	r1, r1, #4
 8000574:	430a      	orrs	r2, r1
 8000576:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LCD_HEIGHT; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e01c      	b.n	80005b8 <main+0x78>
      for (int j = 0; j < LCD_WIDTH; j++) {
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	e013      	b.n	80005ac <main+0x6c>
        uint16_t color = image_data[i][j];
 8000584:	1db9      	adds	r1, r7, #6
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <main+0xb4>)
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	0013      	movs	r3, r2
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	189b      	adds	r3, r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	5a1b      	ldrh	r3, [r3, r0]
 800059a:	800b      	strh	r3, [r1, #0]
        spi_send16(color);
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ff1b 	bl	80003dc <spi_send16>
      for (int j = 0; j < LCD_WIDTH; j++) {
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	2bef      	cmp	r3, #239	; 0xef
 80005b0:	dde8      	ble.n	8000584 <main+0x44>
    for (int i = 0; i < LCD_HEIGHT; i++) {
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	429a      	cmp	r2, r3
 80005c0:	dbdd      	blt.n	800057e <main+0x3e>
      }
    }
    spi_wait_done();
 80005c2:	f7ff ff23 	bl	800040c <spi_wait_done>
    SPI1->CR2 |= (SPI_DATA_SIZE_8BIT << SPI_CR2_DS_Pos);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <main+0xb0>)
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <main+0xb0>)
 80005cc:	21e0      	movs	r1, #224	; 0xe0
 80005ce:	00c9      	lsls	r1, r1, #3
 80005d0:	430a      	orrs	r2, r1
 80005d2:	605a      	str	r2, [r3, #4]
    lcd_send_command(DISPLAY_ON);
 80005d4:	2029      	movs	r0, #41	; 0x29
 80005d6:	f7ff ff27 	bl	8000428 <lcd_send_command>
    spi_wait_done();
 80005da:	f7ff ff17 	bl	800040c <spi_wait_done>
    lcd_send_command(DISPLAY_OFF);
 80005de:	2028      	movs	r0, #40	; 0x28
 80005e0:	f7ff ff22 	bl	8000428 <lcd_send_command>
    lcd_cs_inactive();
 80005e4:	f7ff fe33 	bl	800024e <lcd_cs_inactive>
  }

  // Stay here
  while (1) {
 80005e8:	e7fe      	b.n	80005e8 <main+0xa8>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	48000400 	.word	0x48000400
 80005f0:	40013000 	.word	0x40013000
 80005f4:	08000708 	.word	0x08000708

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f832 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f7ff fff7 	bl	8000626 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f823 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff ff6d 	bl	8000540 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000674:	08025f10 	.word	0x08025f10
  ldr r2, =_sbss
 8000678:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800067c:	20000024 	.word	0x20000024

08000680 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_COMP_IRQHandler>
	...

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	001a      	movs	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	18d2      	adds	r2, r2, r3
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000020 	.word	0x20000020

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2600      	movs	r6, #0
 80006ac:	4d0c      	ldr	r5, [pc, #48]	; (80006e0 <__libc_init_array+0x38>)
 80006ae:	4c0d      	ldr	r4, [pc, #52]	; (80006e4 <__libc_init_array+0x3c>)
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	2600      	movs	r6, #0
 80006ba:	f000 f819 	bl	80006f0 <_init>
 80006be:	4d0a      	ldr	r5, [pc, #40]	; (80006e8 <__libc_init_array+0x40>)
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <__libc_init_array+0x44>)
 80006c2:	1b64      	subs	r4, r4, r5
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	00b3      	lsls	r3, r6, #2
 80006ce:	58eb      	ldr	r3, [r5, r3]
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	00b3      	lsls	r3, r6, #2
 80006d8:	58eb      	ldr	r3, [r5, r3]
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08025f08 	.word	0x08025f08
 80006e4:	08025f08 	.word	0x08025f08
 80006e8:	08025f08 	.word	0x08025f08
 80006ec:	08025f0c 	.word	0x08025f0c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
